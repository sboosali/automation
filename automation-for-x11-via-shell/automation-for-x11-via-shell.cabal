cabal-version:       2.2
                     -- for indefinite-modules and "common stanzas".

----------------------------------------

name:                automation-for-x11-via-shell
version:             0.1

-- x-revision:          0

----------------------------------------

synopsis:            Automation: Keyboard, Mouse, Clipboard, Applications.
description:         Simulation and Automation for: Keyboard, Mouse, Clipboard access, Application manipulation. This package provides *signatures* only (mostly).

build-type:          Simple

license:             GPL-3.0-or-later
license-file:        ./documents/LICENSE.txt
copyright:           2018 Spiros Boosalis

author:              Spiros Boosalis
maintainer:          samboosalis@gmail.com

category:            Accessibility
stability:           provisional

-- extra-source-files:

----------------------------------------
-- REPOSITORY
----------------------------------------

homepage:            http://github.com/sboosali/automation#readme
bug-reports:         http://github.com/sboosali/automation/issues

source-repository head
  type:     git
  location: git://github.com/sboosali/automation.git
  subdir:   automation-for-x11-via-shell

-- source-repository this
--   type:     git
--   location: https://github.com/sboosali/automation/tree/v0.1
--   subdir:   automation-for-x11-via-shell

----------------------------------------
-- FLAGS
----------------------------------------

-- flag ...
--   default:     False
--   description: Enable ...
--   manual:      True

----------------------------------------
-- COMMON_STANZAS
----------------------------------------
common haskell2020

 default-language:
   Haskell2010

 ------------------------------
 ------------------------------
 ghc-options:

  --------------------
  -- warning groups
  --------------------

  -Wall

  --------------------
  -- disabled warnings
  --------------------

  -Wno-unticked-promoted-constructors

  --------------------
  -- enabled warnings
  --------------------

  -- enable
  -Wincomplete-uni-patterns
  -Wincomplete-record-updates
  -Widentities
  -Wmissing-methods
  -fwarn-tabs
 
  --------------------
  -- typed-holes
  --------------------

  -- use `typed-holes`, not `undefined`, during development

  -fdefer-typed-holes
  -Wtyped-holes

  --------------------
  -- (miscellaneous warnings)
  --------------------

  -- raise a warning into an error
  -- -Werror=missing-fields

 if impl(ghc >= 8.0)
    ghc-options:

        --------------------
        -- warning groups
        --------------------     

        -Wcompat
      
        --------------------
        -- enabled warnings
        --------------------

        -Wnoncanonical-monad-instances
        -Wnoncanonical-monadfail-instances

 ------------------------------
 ------------------------------

 default-extensions:

   --------------------
   -- "controversial"
   --------------------
   NoImplicitPrelude

   --------------------
   -- `deriving`
   --------------------
   AutoDeriveTypeable
   DeriveDataTypeable
   DeriveGeneric
   DeriveFunctor
   DeriveFoldable
   DeriveTraversable
   DeriveLift
   StandaloneDeriving

   --------------------
   -- syntax
   --------------------
   PackageImports
   LambdaCase
   EmptyCase
   TypeOperators
   PostfixOperators
   BangPatterns
   KindSignatures
   NamedFieldPuns
   RecordWildCards
   TupleSections
   MultiWayIf
   DoAndIfThenElse
   EmptyDataDecls
   InstanceSigs
   
   --------------------
   -- typeclasses
   --------------------
   MultiParamTypeClasses
   FlexibleContexts
   FlexibleInstances
   TypeFamilies
   FunctionalDependencies

   --------------------
   -- patterns
   --------------------
   ViewPatterns
   PatternSynonyms

   --------------------
   -- (miscellaneous)
   --------------------
   ScopedTypeVariables

 other-extensions:

   --------------------
   -- macros
   --------------------
   TemplateHaskell
   -- QuasiQuotes

   --------------------
   -- syntax (of literals)
   --------------------
   OverloadedStrings
   OverloadedLists

   --------------------
   -- (miscellaneous)
   --------------------

   -- RebindableSyntax
   -- kinds:
   -- DataKinds ConstraintKinds
   -- harmful to inference:
   -- GADTs RankNTypes
   -- (miscellaneous)

----------------------------------------
-- LIBRARY
----------------------------------------
library

 import: haskell2020

 hs-source-dirs:
   sources

 ------------------------------
 ------------------------------

 exposed-modules:
  Automation.X11

 -- other-modules:
 --  Prelude.Automation

 ------------------------------
 ------------------------------
 build-depends:

  --------------------
  -- boot libraries / "standard" library
  --------------------

    base >=4.7 && <5

  , text 
  , bytestring

  , transformers
  , mtl

  , containers

   --------------------
   -- my packages
   -- (sboosali on github, sboo on hackage)
   --------------------

  , spiros >=0.2
  -- , enumerate >=0.2 

   --------------------
   -- "extended" standard library 
   --------------------

  , deepseq

  , hashable

  , unordered-containers

   --------------------
   -- ekmett 
   --------------------
 
  , exceptions
  , lens

   --------------------
   -- "development"
   --------------------

  , generic-lens

   --------------------
   -- (miscellaneous)
   --------------------

----------------------------------------
-- NOTES
----------------------------------------

-- [x-revision]

-- the `x-revision` must be incremented on every hackage metadata revision.

-- [source-repository this]

-- Update the `source-repository` for `this` package version on every release
-- (i.e. on every hackage upload or metadata revision).  
-- e.g. Assuming you've created a git tag with that version:
-- `git tag -a v0.1.0 -m "Hackage Release of Version 0.1.0" && git push origin v0.1.0`).

-- [flag.manual]
-- Whether the flag must be set manually by the user (for example, on the command line, as `-f+FLAGNAME`); or whether the solver can attempt to satisfy constraints by setting the flag automatically.

-- []
-- 